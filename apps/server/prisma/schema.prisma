// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  username String @unique @default(cuid())
  email    String @unique
  password String

  roles UserRole[] @default([USER])

  profile Profile?

  messages               Message[]
  tokens                 Token[]
  channels               Channel[]    @relation("ChannelUsers")
  ownedChannels          Channel[]    @relation("ChannelOwner")
  friendRequestsSent     Friendship[] @relation("FriendRequestsSent")
  friendRequestsReceived Friendship[] @relation("FriendRequestsReceived")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Profile {
  id          String  @id @default(uuid())
  displayName String
  bio         String?
  avatarUrl   String?
  bannerUrl   String?
  websiteUrl  String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model Token {
  id    String @id @default(uuid())
  token String @unique @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime

  @@map("tokens")
}

model Message {
  id      String      @id @default(uuid())
  content String
  type    MessageType @default(DEFAULT)

  authorId String?
  author   User?   @relation(fields: [authorId], references: [id])

  channelId          String
  channel            Channel  @relation("ChannelMessages", fields: [channelId], references: [id], onDelete: Cascade)
  channelLastMessage Channel? @relation("LastMessage")

  editedAt  DateTime?
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("messages")
}

model Channel {
  id          String  @id @default(uuid())
  name        String
  description String?

  type     ChannelType @default(GROUP)
  isPublic Boolean     @default(false)

  messages      Message[] @relation("ChannelMessages")
  lastMessage   Message?  @relation("LastMessage", fields: [lastMessageId], references: [id])
  lastMessageId String?   @unique

  inviteLinks InviteLink[]
  users       User[]       @relation("ChannelUsers")

  ownerId String?
  owner   User?   @relation("ChannelOwner", fields: [ownerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("channels")
}

model Friendship {
  id     String              @id @default(uuid())
  status FriendRequestStatus @default(PENDING)

  fromId String
  from   User   @relation("FriendRequestsSent", fields: [fromId], references: [id], onDelete: Cascade)

  toId String
  to   User   @relation("FriendRequestsReceived", fields: [toId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fromId, toId])
  @@map("friendships")
}

model InviteLink {
  id   String @id @default(uuid())
  code String @unique

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  maxUses Int?
  uses    Int  @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

enum ChannelType {
  DM
  GROUP
}

enum UserRole {
  USER
  ADMIN
}

enum MessageType {
  DEFAULT
  SYSTEM
}
