/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type $defs = Record<string, never>;
export interface components {
  headers: never;
  parameters: never;
  pathItems: never;
  requestBodies: never;
  responses: never;
  schemas: {
    CreateChannelDto: {
      description?: string;
      isPublic?: boolean;
      name: string;
      type?: Record<string, never>;
      userIds: string[];
    };
    CreateFriendRequestDto: {
      to: string;
    };
    CreateMessageDto: {
      channelId: string;
      content: string;
    };
    CreateUserDto: {
      /** Format: email */
      email: string;
      password: string;
      roles: Record<string, never>[];
      username: string;
    };
    LoginDto: {
      password: string;
      username: string;
    };
    Object: Record<string, never>;
    RegisterDto: {
      /** Format: email */
      email: string;
      password: string;
      username: string;
    };
    UpdateChannelDto: {
      description?: string;
      name?: string;
    };
    UpdateFriendRequestDto: {
      status: Record<string, never>;
    };
    UpdateMessageDto: {
      content?: string;
    };
    UpdateUserDto: Record<string, never>;
  };
}
export interface operations {
  AppController_index: {
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  AuthController_getMe: {
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  AuthController_login: {
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginDto'];
      };
    };
    responses: {
      200: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  AuthController_register: {
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RegisterDto'];
      };
    };
    responses: {
      201: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  ChannelsController_create: {
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateChannelDto'];
      };
    };
    responses: {
      201: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  ChannelsController_createDMChannel: {
    parameters: {
      cookie?: never;
      header?: never;
      path: {
        targetUserId: string;
      };
      query?: never;
    };
    requestBody?: never;
    responses: {
      201: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  ChannelsController_findAll: {
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: {
        fields?: string;
        limit?: number;
        offset?: number;
        order?: components['schemas']['Object'];
        search?: string;
        sort?: string;
      };
    };
    requestBody?: never;
    responses: {
      200: {
        content: {
          'application/json': Record<string, never>[];
        };
        headers: Record<string, unknown>;
      };
    };
  };
  ChannelsController_findAllDMChannels: {
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        content: {
          'application/json': Record<string, never>[];
        };
        headers: Record<string, unknown>;
      };
    };
  };
  ChannelsController_findMessages: {
    parameters: {
      cookie?: never;
      header?: never;
      path: {
        id: string;
      };
      query?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        content: {
          'application/json': Record<string, never>[];
        };
        headers: Record<string, unknown>;
      };
    };
  };
  ChannelsController_findOne: {
    parameters: {
      cookie?: never;
      header?: never;
      path: {
        id: string;
      };
      query?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        content: {
          'application/json': Record<string, never>;
        };
        headers: Record<string, unknown>;
      };
    };
  };
  ChannelsController_kickUser: {
    parameters: {
      cookie?: never;
      header?: never;
      path: {
        id: string;
        userId: string;
      };
      query?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  ChannelsController_leaveChannel: {
    parameters: {
      cookie?: never;
      header?: never;
      path: {
        id: string;
      };
      query?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  ChannelsController_remove: {
    parameters: {
      cookie?: never;
      header?: never;
      path: {
        id: string;
      };
      query?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  ChannelsController_update: {
    parameters: {
      cookie?: never;
      header?: never;
      path: {
        id: string;
      };
      query?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateChannelDto'];
      };
    };
    responses: {
      200: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  FriendsController_acceptFriendRequest: {
    parameters: {
      cookie?: never;
      header?: never;
      path: {
        id: string;
      };
      query?: never;
    };
    requestBody?: never;
    responses: {
      201: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  FriendsController_create: {
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateFriendRequestDto'];
      };
    };
    responses: {
      201: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  FriendsController_declineFriendRequest: {
    parameters: {
      cookie?: never;
      header?: never;
      path: {
        id: string;
      };
      query?: never;
    };
    requestBody?: never;
    responses: {
      201: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  FriendsController_findAll: {
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        content: {
          'application/json': Record<string, never>[];
        };
        headers: Record<string, unknown>;
      };
    };
  };
  FriendsController_findPendingRequests: {
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        content: {
          'application/json': Record<string, never>[];
        };
        headers: Record<string, unknown>;
      };
    };
  };
  FriendsController_remove: {
    parameters: {
      cookie?: never;
      header?: never;
      path: {
        id: string;
      };
      query?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  FriendsController_update: {
    parameters: {
      cookie?: never;
      header?: never;
      path: {
        id: string;
      };
      query?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateFriendRequestDto'];
      };
    };
    responses: {
      200: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  InvitesController_createInvite: {
    parameters: {
      cookie?: never;
      header?: never;
      path: {
        channelId: string;
      };
      query?: never;
    };
    requestBody?: never;
    responses: {
      201: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  InvitesController_joinChannel: {
    parameters: {
      cookie?: never;
      header?: never;
      path: {
        code: string;
      };
      query?: never;
    };
    requestBody?: never;
    responses: {
      201: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  MessagesController_create: {
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateMessageDto'];
      };
    };
    responses: {
      201: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  MessagesController_findAll: {
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: {
        fields?: string;
        limit?: number;
        offset?: number;
        order?: components['schemas']['Object'];
        search?: string;
        sort?: string;
      };
    };
    requestBody?: never;
    responses: {
      200: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  MessagesController_findOne: {
    parameters: {
      cookie?: never;
      header?: never;
      path: {
        id: string;
      };
      query?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  MessagesController_remove: {
    parameters: {
      cookie?: never;
      header?: never;
      path: {
        id: string;
      };
      query?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  MessagesController_update: {
    parameters: {
      cookie?: never;
      header?: never;
      path: {
        id: string;
      };
      query?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateMessageDto'];
      };
    };
    responses: {
      200: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  ProfilesController_getMyProfile: {
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  ProfilesController_getProfileByUserId: {
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  ProfilesController_updateMyProfile: {
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  UsersController_create: {
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateUserDto'];
      };
    };
    responses: {
      201: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  UsersController_findAll: {
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  UsersController_findOne: {
    parameters: {
      cookie?: never;
      header?: never;
      path: {
        id: string;
      };
      query?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  UsersController_remove: {
    parameters: {
      cookie?: never;
      header?: never;
      path: {
        id: string;
      };
      query?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
  UsersController_update: {
    parameters: {
      cookie?: never;
      header?: never;
      path: {
        id: string;
      };
      query?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateUserDto'];
      };
    };
    responses: {
      200: {
        content?: never;
        headers: Record<string, unknown>;
      };
    };
  };
}
export interface paths {
  '/api': {
    delete?: never;
    get: operations['AppController_index'];
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch?: never;
    post?: never;
    put?: never;
    trace?: never;
  };
  '/api/auth/@me': {
    delete?: never;
    get: operations['AuthController_getMe'];
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch?: never;
    post?: never;
    put?: never;
    trace?: never;
  };
  '/api/auth/login': {
    delete?: never;
    get?: never;
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch?: never;
    post: operations['AuthController_login'];
    put?: never;
    trace?: never;
  };
  '/api/auth/register': {
    delete?: never;
    get?: never;
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch?: never;
    post: operations['AuthController_register'];
    put?: never;
    trace?: never;
  };
  '/api/channels': {
    delete?: never;
    get: operations['ChannelsController_findAll'];
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch?: never;
    post: operations['ChannelsController_create'];
    put?: never;
    trace?: never;
  };
  '/api/channels/dm': {
    delete?: never;
    get: operations['ChannelsController_findAllDMChannels'];
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch?: never;
    post?: never;
    put?: never;
    trace?: never;
  };
  '/api/channels/dm/{targetUserId}': {
    delete?: never;
    get?: never;
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch?: never;
    post: operations['ChannelsController_createDMChannel'];
    put?: never;
    trace?: never;
  };
  '/api/channels/{id}': {
    delete: operations['ChannelsController_remove'];
    get: operations['ChannelsController_findOne'];
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch: operations['ChannelsController_update'];
    post?: never;
    put?: never;
    trace?: never;
  };
  '/api/channels/{id}/kick/{userId}': {
    delete: operations['ChannelsController_kickUser'];
    get?: never;
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch?: never;
    post?: never;
    put?: never;
    trace?: never;
  };
  '/api/channels/{id}/leave': {
    delete: operations['ChannelsController_leaveChannel'];
    get?: never;
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch?: never;
    post?: never;
    put?: never;
    trace?: never;
  };
  '/api/channels/{id}/messages': {
    delete?: never;
    get: operations['ChannelsController_findMessages'];
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch?: never;
    post?: never;
    put?: never;
    trace?: never;
  };
  '/api/friendships': {
    delete?: never;
    get: operations['FriendsController_findAll'];
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch?: never;
    post: operations['FriendsController_create'];
    put?: never;
    trace?: never;
  };
  '/api/friendships/pending': {
    delete?: never;
    get: operations['FriendsController_findPendingRequests'];
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch?: never;
    post?: never;
    put?: never;
    trace?: never;
  };
  '/api/friendships/{id}': {
    delete: operations['FriendsController_remove'];
    get?: never;
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch: operations['FriendsController_update'];
    post?: never;
    put?: never;
    trace?: never;
  };
  '/api/friendships/{id}/accept': {
    delete?: never;
    get?: never;
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch?: never;
    post: operations['FriendsController_acceptFriendRequest'];
    put?: never;
    trace?: never;
  };
  '/api/friendships/{id}/reject': {
    delete?: never;
    get?: never;
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch?: never;
    post: operations['FriendsController_declineFriendRequest'];
    put?: never;
    trace?: never;
  };
  '/api/invites/{channelId}': {
    delete?: never;
    get?: never;
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch?: never;
    post: operations['InvitesController_createInvite'];
    put?: never;
    trace?: never;
  };
  '/api/invites/{code}/join': {
    delete?: never;
    get?: never;
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch?: never;
    post: operations['InvitesController_joinChannel'];
    put?: never;
    trace?: never;
  };
  '/api/messages': {
    delete?: never;
    get: operations['MessagesController_findAll'];
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch?: never;
    post: operations['MessagesController_create'];
    put?: never;
    trace?: never;
  };
  '/api/messages/{id}': {
    delete: operations['MessagesController_remove'];
    get: operations['MessagesController_findOne'];
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch: operations['MessagesController_update'];
    post?: never;
    put?: never;
    trace?: never;
  };
  '/api/profiles/me': {
    delete?: never;
    get: operations['ProfilesController_getMyProfile'];
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch: operations['ProfilesController_updateMyProfile'];
    post?: never;
    put?: never;
    trace?: never;
  };
  '/api/profiles/{userId}': {
    delete?: never;
    get: operations['ProfilesController_getProfileByUserId'];
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch?: never;
    post?: never;
    put?: never;
    trace?: never;
  };
  '/api/users': {
    delete?: never;
    get: operations['UsersController_findAll'];
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch?: never;
    post: operations['UsersController_create'];
    put?: never;
    trace?: never;
  };
  '/api/users/{id}': {
    delete: operations['UsersController_remove'];
    get: operations['UsersController_findOne'];
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch: operations['UsersController_update'];
    post?: never;
    put?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
